zookeeper.connect=localhost:2181

bootstrap.servers=localhost:9092
serializer.class=kafka.serializer.StringEncoder
key.serializer.class=kafka.serializer.StringEncoder
#acks=0： 设置为0表示producer不需要等待任何确认收到的信息。副本将立即加到socket buffer并认为已经发送。
#没有任何保障可以保证此种情况下server已经成功接收数据，同时重试配置不会发生作用（因为客户端不知道是否失败）回馈的offset会总是设置为-1；
#（2）acks=1： 这意味着至少要等待leader已经成功将数据写入本地log，但是并没有等待所有follower是否成功写入。这种情况下，如果follower没有成功备份数据，而此时leader又挂掉，则消息会丢失。
#（3）acks=all： 这意味着leader需要等待所有备份都成功写入日志，这种策略会保证只要有一个备份存活就不会丢失数据。这是最强的保证。
producer.acks=1
#消息发送失败之后的重试次数
producer.retries=3
#批量发送的字节数
producer.batch.size=1024
#数据积累的延迟
producer.linger.ms=1000
#用于缓存的总内存，包括缓存消息的内存和压缩、序列化的内存
producer.buffer.memory=33554432


#enable.auto.commit是否定期想zookeeper中写入offset
consumer.enable.auto.commit=true
#auto.commit.interval.ms向zk中写入offset的频率
consumer.auto.commit.interval.ms=10000
consumer.session.timeout.ms=300000
consumer.default.group.id=test
